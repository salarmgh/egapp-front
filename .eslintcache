[{"/home/salarmgh/Workspace/egapp-front/src/App.tsx":"1","/home/salarmgh/Workspace/egapp-front/src/reportWebVitals.ts":"2","/home/salarmgh/Workspace/egapp-front/src/Layouts/Index.tsx":"3","/home/salarmgh/Workspace/egapp-front/src/index.tsx":"4","/home/salarmgh/Workspace/egapp-front/src/Router/Router.tsx":"5","/home/salarmgh/Workspace/egapp-front/src/Layouts/Login.tsx":"6"},{"size":268,"mtime":1611420324215,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1611240344263,"results":"9","hashOfConfig":"8"},{"size":4992,"mtime":1611505526309,"results":"10","hashOfConfig":"8"},{"size":508,"mtime":1608746938614,"results":"11","hashOfConfig":"12"},{"size":385,"mtime":1608638880000,"results":"13","hashOfConfig":"12"},{"size":4288,"mtime":1611420273729,"results":"14","hashOfConfig":"8"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jmb5v1",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"20isxg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/home/salarmgh/Workspace/egapp-front/src/App.tsx",[],"/home/salarmgh/Workspace/egapp-front/src/reportWebVitals.ts",[],"/home/salarmgh/Workspace/egapp-front/src/Layouts/Index.tsx",[],"/home/salarmgh/Workspace/egapp-front/src/index.tsx",[],"/home/salarmgh/Workspace/egapp-front/src/Router/Router.tsx",[],"/home/salarmgh/Workspace/egapp-front/src/Layouts/Login.tsx",["28","29"],"import React, { useState } from \"react\";\nimport { Form, Input, Button, Checkbox, Card, Row, Col } from \"antd\";\nimport { Redirect } from \"react-router-dom\";\n\n//import ws from \"../globals\";\n\nconst Login = () => {\n    const [loginState, setLoginState] = useState(false);\n    const { client, xml, jid } = require(\"@xmpp/client\");\n    const debug = require(\"@xmpp/debug\");\n    //ws.onmessage = function (event) {\n    //    console.log(`[message] Data received from server: ${event.data}`);\n    //};\n\n    const onFinish = (values: any) => {\n        console.log(\"Success:\", values);\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n        //console.log(\"Failed:\", errorInfo);\n        const xmpp = client({\n            service: \"ws://172.16.143.34:8085/ws\",\n            domain: \"egapp.im\",\n            username: \"mahyar\",\n            password: \"123\",\n        });\n\n        debug(xmpp, true);\n\n        xmpp.on(\"error\", (err) => {\n            console.error(err);\n        });\n\n        xmpp.on(\"offline\", () => {\n            console.log(\"offline\");\n        });\n\n        xmpp.on(\"stanza\", async (stanza) => {\n            if (stanza.is(\"message\")) {\n                await xmpp.send(xml(\"presence\", { type: \"unavailable\" }));\n                await xmpp.stop();\n            }\n        });\n\n        xmpp.on(\"online\", async (address) => {\n            // Makes itself available\n            await xmpp.send(xml(\"presence\"));\n\n            // Sends a chat message to itself\n            const message = xml(\n                \"message\",\n                { type: \"chat\", to: address },\n                xml(\"body\", {}, \"hello world\")\n            );\n            await xmpp.send(message);\n        });\n\n        xmpp.start().catch(console.error);\n        //ws.send(\n        //    \"<stream:stream to='egapp.im' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\"\n        //);\n        //ws.send(\n        //    \"<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='PLAIN' xmlns:ga='http://www.google.com/talk/protocol/auth' ga:client-uses-full-bind-result='true'>AHNhbGFyADEyMw==</auth>\"\n        //);\n        //setLoginState(true);\n    };\n\n    const tabList = [\n        {\n            key: \"login\",\n            tab: \"Login\",\n        },\n        {\n            key: \"register\",\n            tab: \"Register\",\n        },\n    ];\n\n    if (loginState) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Row>\n            <Col span={7} offset={9}>\n                <Card title=\"Card title\" bordered={true} tabList={tabList}>\n                    <Form\n                        name=\"basic\"\n                        initialValues={{ remember: true }}\n                        onFinish={onFinish}\n                        onFinishFailed={onFinishFailed}\n                    >\n                        <Form.Item\n                            label=\"Username\"\n                            name=\"username\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: \"Please input your username!\",\n                                },\n                            ]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Password\"\n                            name=\"password\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: \"Please input your password!\",\n                                },\n                            ]}\n                        >\n                            <Input.Password />\n                        </Form.Item>\n\n                        <Form.Item name=\"remember\" valuePropName=\"checked\">\n                            <Checkbox>Remember me</Checkbox>\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Card>\n            </Col>\n        </Row>\n    );\n};\n\nexport default Login;\n",{"ruleId":"30","severity":1,"message":"31","line":8,"column":24,"nodeType":"32","messageId":"33","endLine":8,"endColumn":37},{"ruleId":"30","severity":1,"message":"34","line":9,"column":26,"nodeType":"32","messageId":"33","endLine":9,"endColumn":29},"@typescript-eslint/no-unused-vars","'setLoginState' is assigned a value but never used.","Identifier","unusedVar","'jid' is assigned a value but never used."]